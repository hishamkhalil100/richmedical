@model richmedical.Models.TeamMember

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<section id="content" class="table-layout animated fadeIn">
    <div class="tray tray-center">
        <div class="mw1000 center-block">
            <div class="admin-form">
                <div class="panel heading-border">
                    <div class="panel-body bg-light">
                        @using (Html.BeginForm("Edit", "TeamMembers", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="section-divider mb40" id="spy1">
                                <span>TeamMember</span>
                            </div>


                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="section">
                                        <label class="field">

                                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "gui-input", PlaceHolder = "Name" } })
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                        </label>
                                    </div>
                                </div>

                            </div>



                            <div class="row">
                                <div class="col-md-12">
                                    <div class="section">
                                        <label class="field">

                                            @Html.EditorFor(model => model.NameAr, new { htmlAttributes = new { @class = "gui-input", PlaceHolder = "Arabic Name" } })
                                            @Html.ValidationMessageFor(model => model.NameAr, "", new { @class = "text-danger" })
                                        </label>
                                    </div>
                                </div>

                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div class="section">
                                        <label class="field">

                                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "gui-input", PlaceHolder = "Description" } })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </label>
                                    </div>
                                </div>

                            </div>



                            <div class="row">
                                <div class="col-md-12">
                                    <div class="section">
                                        <label class="field">

                                            @Html.EditorFor(model => model.DescriptionAr, new { htmlAttributes = new { @class = "gui-input", PlaceHolder = "Arabic Description" } })
                                            @Html.ValidationMessageFor(model => model.DescriptionAr, "", new { @class = "text-danger" })
                                        </label>
                                    </div>
                                </div>

                            </div>

                            <div class="panel mt20" id="spy1">

                                <div class="panel-body pn">
                                    <div class="row table-layout table-clear-xs">
                                        <div class="col-xs-12 col-sm-7">
                                            <div class="img-container  pv10">
                                                <img src="~/Images/@Model.Image">
                                            </div>
                                        </div>
                                        <div class="col-xs-12 col-sm-5 bg-light br-l br-grey va-t pv10">

                                            <div class="clearfix">
                                                <div class="img-preview preview-lg"><img id="large" src="assets\img\stock\1.jpg"></div>
                                                <div class="img-preview preview-md"><img src="assets\img\stock\1.jpg"></div>
                                                <div class="img-preview preview-sm"><img src="assets\img\stock\1.jpg"></div>
                                                <div class="img-preview preview-xs"><img src="assets\img\stock\1.jpg"></div>
                                            </div>

                                        </div>
                                    </div>


                                </div>
                                <div class="panel-footer">
                                    <div class="docs-buttons">
                                        <div class="btn-group">
                                            <button class="btn btn-primary btn-sm" data-method="setDragMode" data-option="move" type="button" title="Move">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setDragMode&quot;, &quot;move&quot;)">
                                                    <span class="fa fa-arrows"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="setDragMode" data-option="crop" type="button" title="Crop">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;setDragMode&quot;, &quot;crop&quot;)">
                                                    <span class="fa fa-crop"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="zoom" data-option="0.1" type="button" title="Zoom In">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;zoom&quot;, 0.1)">
                                                    <span class="fa fa-search-plus"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="zoom" data-option="-0.5" type="button" title="Zoom Out">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;zoom&quot;, -0.1)">
                                                    <span class="fa fa-search-minus"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="rotate" data-option="-45" type="button" title="Rotate Left">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;rotate&quot;, -45)">
                                                    <span class="fa fa-rotate-left"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="rotate" data-option="45" type="button" title="Rotate Right">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;rotate&quot;, 45)">
                                                    <span class="fa fa-rotate-right"></span>
                                                </span>
                                            </button>
                                        </div>

                                        <div class="btn-group">
                                            <button class="btn btn-primary btn-sm" data-method="disable" type="button" title="Disable">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;disable&quot;)">
                                                    <span class="fa fa-lock"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="enable" type="button" title="Enable">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;enable&quot;)">
                                                    <span class="fa fa-unlock"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="clear" type="button" title="Clear">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;clear&quot;)">
                                                    <span class="fa fa-remove"></span>
                                                </span>
                                            </button>
                                            <button class="btn btn-primary btn-sm" data-method="reset" type="button" title="Reset">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;reset&quot;)">
                                                    <span class="fa fa-refresh"></span>
                                                </span>
                                            </button>
                                            <label class="btn btn-primary btn-sm btn-upload" for="inputImage" title="Upload image file">
                                                <input class="sr-only" id="inputImage" name="fileas" type="file" accept="image/*">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="Import image with Blob URLs">
                                                    <span class="fa fa-upload"> Upload Image</span>
                                                </span>
                                            </label>

                                        </div>

                                        <div class="btn-group btn-group-crop">
                                            <button class="btn btn-primary btn-sm" data-method="getCroppedCanvas" type="button">
                                                <span class="docs-tooltip" data-toggle="tooltip" title="$().cropper(&quot;getCroppedCanvas&quot;)">
                                                    Get Cropped Canvas
                                                </span>
                                            </button>
                                        </div>

                                        <!-- Show the cropped image in modal -->
                                        <div class="modal fade docs-cropped" id="getCroppedCanvasModal" aria-hidden="true" aria-labelledby="getCroppedCanvasTitle" role="dialog" tabindex="-1">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <button class="close" data-dismiss="modal" type="button" aria-hidden="true">&times;</button>
                                                        <h4 class="modal-title" id="getCroppedCanvasTitle">Cropped</h4>
                                                    </div>
                                                    <div class="modal-body"></div>
                                                    <!-- <div class="modal-footer">
                                                      <button class="btn btn-primary" data-dismiss="modal" type="button">Close</button>
                                                    </div> -->
                                                </div>
                                            </div>
                                        </div>
                                        <!-- /.modal -->
                                    </div>
                                </div>
                            </div>



                            @Html.Hidden("imgValue", null, new { id = "imgValue" })

                            <div class="panel-footer text-right">

                                <button type="submit" class="button btn-primary"> Save </button>
                                <button type="reset" class="button btn-primary"> Cancel </button>
                                @Html.ActionLink("Back to List", "Index", null, new Dictionary<string, object> { { "class", "button btn-primary" } })

                            </div>

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts
{
    <script src="~/Scripts/Admin/cropper.min.js"></script>
    <script type="text/javascript">
        jQuery(document).ready(function () {

            "use strict";

            // Init Theme Core
            Core.init();

            // Init Demo JS
            Demo.init();


            // Cropper Demo
            (function () {

                var $image = $('.img-container > img'),
                    $dataX = $('#dataX'),
                    $dataY = $('#dataY'),
                    $dataHeight = $('#dataHeight'),


                    $dataWidth = $('#dataWidth'),
                    $dataRotate = $('#dataRotate'),
                    options = {
                        aspectRatio: 1,
                        preview: '.img-preview',
                        crop: function (data) {
                            $dataX.val(Math.round(data.x));
                            $dataY.val(Math.round(data.y));
                            $dataHeight.val(Math.round(data.height));
                            $dataWidth.val(Math.round(data.width));
                            $dataRotate.val(Math.round(data.rotate));
                        }
                    };

                $image.on({
                    'build.cropper': function (e) {
                        console.log(e.type);
                    },
                    'built.cropper': function (e) {
                        console.log(e.type);
                    },
                    'dragstart.cropper': function (e) {
                        console.log(e.type, e.dragType);
                    },
                    'dragmove.cropper': function (e) {
                        console.log(e.type, e.dragType);
                    },
                    'dragend.cropper': function (e) {
                        console.log(e.type, e.dragType);
                    },
                    'zoomin.cropper': function (e) {
                        console.log(e.type);
                    },
                    'zoomout.cropper': function (e) {
                        console.log(e.type);
                    }
                }).cropper(options);

                // Methods
                $(document.body).on('click',
                    '[data-method]',
                    function () {
                        var data = $(this).data(),
                            $target,
                            result;

                        if (data.method) {
                            data = $.extend({}, data); // Clone a new one

                            if (typeof data.target !== 'undefined') {
                                $target = $(data.target);

                                if (typeof data.option === 'undefined') {
                                    try {
                                        data.option = JSON.parse($target.val());
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                }
                            }

                            result = $image.cropper(data.method, data.option);

                            if (data.method === 'getCroppedCanvas') {
                                $('#getCroppedCanvasModal').modal().find('.modal-body').html(result);
                            }

                            if ($.isPlainObject(result) && $target) {
                                try {
                                    $target.val(JSON.stringify(result));
                                } catch (e) {
                                    console.log(e.message);
                                }
                            }

                        }
                    }).on('keydown',
                        function (e) {

                            switch (e.which) {
                                case 37:
                                    e.preventDefault();
                                    $image.cropper('move', -1, 0);
                                    break;

                                case 38:
                                    e.preventDefault();
                                    $image.cropper('move', 0, -1);
                                    break;

                                case 39:
                                    e.preventDefault();
                                    $image.cropper('move', 1, 0);
                                    break;

                                case 40:
                                    e.preventDefault();
                                    $image.cropper('move', 0, 1);
                                    break;
                            }

                        }).on('submit', function (e) {
                            var result = $image.cropper("getCroppedCanvas", '');
                            alert(result.toDataURL());
                            $('#imgValue').val(result.toDataURL());
                        });


                // Import image
                var $inputImage = $('#inputImage'),
                    URL = window.URL || window.webkitURL,
                    blobURL;

                if (URL) {
                    $inputImage.change(function () {
                        var files = this.files,
                            file;

                        if (files && files.length) {
                            file = files[0];

                            if (/^image\/\w+$/.test(file.type)) {
                                blobURL = URL.createObjectURL(file);
                                $image.one('built.cropper',
                                    function () {
                                        URL.revokeObjectURL(blobURL); // Revoke when load complete
                                    }).cropper('reset', true).cropper('replace', blobURL);
                                $inputImage.val(blobURL);
                            } else {
                                showMessage('Please choose an image file.');
                            }
                        }
                    });
                } else {
                    $inputImage.parent().remove();
                }

                // Options
                $('.docs-options :checkbox').on('change',
                    function () {
                        var $this = $(this);

                        options[$this.val()] = $this.prop('checked');
                        $image.cropper('destroy').cropper(options);
                    });

                // Tooltips
                $('[data-toggle="tooltip"]').tooltip();



            }());

        });

        function getBase64Image(img) {
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            var dataURL = canvas.toDataURL("image/png");
            return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
        }

                //var base64 = getBase64Image(document.getElementById("imageid"));

    </script>
}